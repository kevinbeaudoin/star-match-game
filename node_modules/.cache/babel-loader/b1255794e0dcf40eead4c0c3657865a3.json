{"ast":null,"code":"var _jsxFileName = \"/Users/kevin.beaudoin/Documents/training/star-match-game/src/components/Game.tsx\",\n    _s = $RefreshSig$();\n\n// components\nimport PlayAgain from \"./PlayAgain\";\nimport PlayNumber from \"./PlayNumber\";\nimport StarDisplay from \"./StarDisplay\";\n// logic\nimport utils from \"../logic/utils\";\nimport useGameState from \"../logic/useGameState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  } = useGameState();\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0 ? \"won\" : secondsLeft === 0 ? \"lost\" : \"active\";\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return \"used\";\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? \"wrong\" : \"candidate\";\n    }\n\n    return \"available\";\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (gameStatus !== \"active\" || currentStatus === \"used\") {\n      return;\n    }\n\n    const newCandidateNums = currentStatus === \"available\" ? candidateNums.concat(number) : candidateNums.filter(cn => cn !== number);\n    setGameState(newCandidateNums);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"help\",\n      children: \"Pick 1 or more numbers that sum to the number of stars\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left\",\n        children: gameStatus !== \"active\" ? /*#__PURE__*/_jsxDEV(PlayAgain, {\n          onClick: props.startNewGame,\n          gameStatus: gameStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(StarDisplay, {\n          count: stars\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right\",\n        children: utils.range(1, 9).map(numberId => /*#__PURE__*/_jsxDEV(PlayNumber, {\n          status: numberStatus(numberId),\n          numberId: numberId,\n          onClick: onNumberClick\n        }, numberId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: [\"Time Remaining: \", secondsLeft]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"6RAluwjUof+3EeOFHLM0JyR8AZQ=\", false, function () {\n  return [useGameState];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/kevin.beaudoin/Documents/training/star-match-game/src/components/Game.tsx"],"names":["PlayAgain","PlayNumber","StarDisplay","utils","useGameState","Game","props","stars","availableNums","candidateNums","secondsLeft","setGameState","candidatesAreWrong","sum","gameStatus","length","numberStatus","number","includes","onNumberClick","currentStatus","newCandidateNums","concat","filter","cn","startNewGame","range","map","numberId"],"mappings":";;;AAAA;AACA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAIA;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;;AAMA,SAASC,IAAT,CAAcC,KAAd,EAA6B;AAAA;;AACzB,QAAM;AACFC,IAAAA,KADE;AAEFC,IAAAA,aAFE;AAGFC,IAAAA,aAHE;AAIFC,IAAAA,WAJE;AAKFC,IAAAA;AALE,MAMFP,YAAY,EANhB;AAQA,QAAMQ,kBAAkB,GAAGT,KAAK,CAACU,GAAN,CAAUJ,aAAV,IAA2BF,KAAtD;AACA,QAAMO,UAAU,GACZN,aAAa,CAACO,MAAd,KAAyB,CAAzB,GACM,KADN,GAEML,WAAW,KAAK,CAAhB,GACA,MADA,GAEA,QALV;;AAOA,QAAMM,YAAY,GAAIC,MAAD,IAAoB;AACrC,QAAI,CAACT,aAAa,CAACU,QAAd,CAAuBD,MAAvB,CAAL,EAAqC;AACjC,aAAO,MAAP;AACH;;AACD,QAAIR,aAAa,CAACS,QAAd,CAAuBD,MAAvB,CAAJ,EAAoC;AAChC,aAAOL,kBAAkB,GAAG,OAAH,GAAa,WAAtC;AACH;;AACD,WAAO,WAAP;AACH,GARD;;AAUA,QAAMO,aAAa,GAAG,CAACF,MAAD,EAAiBG,aAAjB,KAAiD;AACnE,QAAIN,UAAU,KAAK,QAAf,IAA2BM,aAAa,KAAK,MAAjD,EAAyD;AACrD;AACH;;AAED,UAAMC,gBAAgB,GAClBD,aAAa,KAAK,WAAlB,GACMX,aAAa,CAACa,MAAd,CAAqBL,MAArB,CADN,GAEMR,aAAa,CAACc,MAAd,CAAsBC,EAAD,IAAQA,EAAE,KAAKP,MAApC,CAHV;AAKAN,IAAAA,YAAY,CAACU,gBAAD,CAAZ;AACH,GAXD;;AAaA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,kBACKP,UAAU,KAAK,QAAf,gBACG,QAAC,SAAD;AACI,UAAA,OAAO,EAAER,KAAK,CAACmB,YADnB;AAEI,UAAA,UAAU,EAAEX;AAFhB;AAAA;AAAA;AAAA;AAAA,gBADH,gBAMG,QAAC,WAAD;AAAa,UAAA,KAAK,EAAEP;AAApB;AAAA;AAAA;AAAA;AAAA;AAPR;AAAA;AAAA;AAAA;AAAA,cADJ,eAWI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,kBACKJ,KAAK,CAACuB,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBC,GAAlB,CAAuBC,QAAD,iBACnB,QAAC,UAAD;AAEI,UAAA,MAAM,EAAEZ,YAAY,CAACY,QAAD,CAFxB;AAGI,UAAA,QAAQ,EAAEA,QAHd;AAII,UAAA,OAAO,EAAET;AAJb,WACSS,QADT;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eA0BI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,qCAAwClB,WAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH;;GAtEQL,I;UAODD,Y;;;KAPCC,I;AAwET,eAAeA,IAAf","sourcesContent":["// components\nimport PlayAgain from \"./PlayAgain\";\nimport PlayNumber from \"./PlayNumber\";\nimport StarDisplay from \"./StarDisplay\";\n\nimport { NumberStatus } from \"./models\";\n\n// logic\nimport utils from \"../logic/utils\";\nimport useGameState from \"../logic/useGameState\";\n\ninterface IProps {\n    startNewGame: () => void;\n}\n\nfunction Game(props: IProps) {\n    const {\n        stars,\n        availableNums,\n        candidateNums,\n        secondsLeft,\n        setGameState,\n    } = useGameState();\n\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\n    const gameStatus =\n        availableNums.length === 0\n            ? \"won\"\n            : secondsLeft === 0\n            ? \"lost\"\n            : \"active\";\n\n    const numberStatus = (number: number) => {\n        if (!availableNums.includes(number)) {\n            return \"used\";\n        }\n        if (candidateNums.includes(number)) {\n            return candidatesAreWrong ? \"wrong\" : \"candidate\";\n        }\n        return \"available\";\n    };\n\n    const onNumberClick = (number: number, currentStatus: NumberStatus) => {\n        if (gameStatus !== \"active\" || currentStatus === \"used\") {\n            return;\n        }\n\n        const newCandidateNums =\n            currentStatus === \"available\"\n                ? candidateNums.concat(number)\n                : candidateNums.filter((cn) => cn !== number);\n\n        setGameState(newCandidateNums);\n    };\n\n    return (\n        <div className=\"game\">\n            <div className=\"help\">\n                Pick 1 or more numbers that sum to the number of stars\n            </div>\n            <div className=\"body\">\n                <div className=\"left\">\n                    {gameStatus !== \"active\" ? (\n                        <PlayAgain\n                            onClick={props.startNewGame}\n                            gameStatus={gameStatus}\n                        />\n                    ) : (\n                        <StarDisplay count={stars} />\n                    )}\n                </div>\n                <div className=\"right\">\n                    {utils.range(1, 9).map((numberId) => (\n                        <PlayNumber\n                            key={numberId}\n                            status={numberStatus(numberId)}\n                            numberId={numberId}\n                            onClick={onNumberClick}\n                        />\n                    ))}\n                </div>\n            </div>\n            <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n        </div>\n    );\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}