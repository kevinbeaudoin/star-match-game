{"ast":null,"code":"const utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(max * Math.random()),\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length)];\n  }\n};\nexport default utils;","map":{"version":3,"sources":["/Users/kevin.beaudoin/Documents/training/star-match-game/src/logic/utils.ts"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push"],"mappings":"AAAA,MAAMA,KAAK,GAAG;AACV;AACAC,EAAAA,GAAG,EAAGC,GAAD,IAAmBA,GAAG,CAACC,MAAJ,CAAW,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAhC,EAAsC,CAAtC,CAFd;AAIV;AACAC,EAAAA,KAAK,EAAE,CAACC,GAAD,EAAcC,GAAd,KACHC,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAEH,GAAG,GAAGD,GAAN,GAAY;AAAtB,GAAX,EAAsC,CAACK,CAAD,EAAIC,CAAJ,KAAUN,GAAG,GAAGM,CAAtD,CANM;AAQV;AACAC,EAAAA,MAAM,EAAE,CAACP,GAAD,EAAcC,GAAd,KAA8BD,GAAG,GAAGQ,IAAI,CAACC,KAAL,CAAWR,GAAG,GAAGO,IAAI,CAACD,MAAL,EAAjB,CATlC;AAWV;AACA;AACAG,EAAAA,WAAW,EAAE,CAACf,GAAD,EAAgBM,GAAhB,KAAgC;AACzC,UAAMU,IAAgB,GAAG,CAAC,EAAD,CAAzB;AACA,UAAMC,IAAc,GAAG,EAAvB;;AACA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,GAAG,CAACS,MAAxB,EAAgCE,CAAC,EAAjC,EAAqC;AACjC,WAAK,IAAIO,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,IAAI,CAACP,MAA3B,EAAmCS,CAAC,GAAGC,GAAvC,EAA4CD,CAAC,EAA7C,EAAiD;AAC7C,cAAME,YAAY,GAAGJ,IAAI,CAACE,CAAD,CAAJ,CAAQG,MAAR,CAAerB,GAAG,CAACW,CAAD,CAAlB,CAArB;AACA,cAAMW,YAAY,GAAGxB,KAAK,CAACC,GAAN,CAAUqB,YAAV,CAArB;;AACA,YAAIE,YAAY,IAAIhB,GAApB,EAAyB;AACrBU,UAAAA,IAAI,CAACO,IAAL,CAAUH,YAAV;AACAH,UAAAA,IAAI,CAACM,IAAL,CAAUD,YAAV;AACH;AACJ;AACJ;;AACD,WAAOL,IAAI,CAACnB,KAAK,CAACc,MAAN,CAAa,CAAb,EAAgBK,IAAI,CAACR,MAArB,CAAD,CAAX;AACH;AA3BS,CAAd;AA8BA,eAAeX,KAAf","sourcesContent":["const utils = {\n    // Sum an array\n    sum: (arr: number[]) => arr.reduce((acc, curr) => acc + curr, 0),\n\n    // create an array of numbers between min and max (edges included)\n    range: (min: number, max: number) =>\n        Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n    // pick a random number between min and max (edges included)\n    random: (min: number, max: number) => min + Math.floor(max * Math.random()),\n\n    // Given an array of numbers and a max...\n    // Pick a random sum (< max) from the set of all available sums in arr\n    randomSumIn: (arr: number[], max: number) => {\n        const sets: number[][] = [[]];\n        const sums: number[] = [];\n        for (let i = 0; i < arr.length; i++) {\n            for (let j = 0, len = sets.length; j < len; j++) {\n                const candidateSet = sets[j].concat(arr[i]);\n                const candidateSum = utils.sum(candidateSet);\n                if (candidateSum <= max) {\n                    sets.push(candidateSet);\n                    sums.push(candidateSum);\n                }\n            }\n        }\n        return sums[utils.random(0, sums.length)];\n    },\n};\n\nexport default utils;\n"]},"metadata":{},"sourceType":"module"}